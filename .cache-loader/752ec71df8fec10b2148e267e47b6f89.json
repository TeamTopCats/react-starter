{"remainingRequest":"/Users/lnked/web/react-starter.dev/node_modules/babel-loader/lib/index.js??ref--21-1!/Users/lnked/web/react-starter.dev/node_modules/cache-loader/dist/cjs.js!/Users/lnked/web/react-starter.dev/node_modules/babel-loader/lib/index.js??ref--22-1!/Users/lnked/web/react-starter.dev/node_modules/awesome-typescript-loader/dist/entry.js??ref--22-2!/Users/lnked/web/react-starter.dev/node_modules/eslint-loader/index.js??ref--18!/Users/lnked/web/react-starter.dev/node_modules/tslint-loader/index.js??ref--19!/Users/lnked/web/react-starter.dev/node_modules/source-map-loader/index.js!/Users/lnked/web/react-starter.dev/src/helpers/utils/format-money.ts","dependencies":[{"path":"/Users/lnked/web/react-starter.dev/src/helpers/utils/format-money.ts","mtime":1537369298000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/cache-loader/dist/cjs.js","mtime":1535757827000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/babel-loader/lib/index.js","mtime":1538108594000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/cache-loader/dist/cjs.js","mtime":1535757827000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/babel-loader/lib/index.js","mtime":1538108594000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/awesome-typescript-loader/dist/entry.js","mtime":1536306832000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/eslint-loader/index.js","mtime":1537424147000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/tslint-loader/index.js","mtime":1535757857000},{"path":"/Users/lnked/web/react-starter.dev/node_modules/source-map-loader/index.js","mtime":1535757854000}],"contextDependencies":[],"result":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.formatMoneyNative=function(num,currency){if(currency===void 0){currency='RUB';}var formatter=new Intl.NumberFormat('ru-RU',{style:'currency',currency:currency,maximumSignificantDigits:2});return num&&formatter.format(num);};exports.formatMoney=function(num,penny,breaking){if(penny===void 0){penny=2;}if(breaking===void 0){breaking=true;}var value=num&&parseFloat(num.toString()).toFixed(penny).replace(/\\d(?=(\\d{3})+\\.)/g,'$& ').replace(/\\./g,',').replace(/,0{2}/g,'');if(!breaking){value=value&&value.replace(/\\s/g,'&nbsp;');}return num&&value||0;};",{"version":3,"sources":["node_modules/eslint-loader/index.js??ref--18!/Users/lnked/web/react-starter.dev/node_modules/tslint-loader/index.js??ref--19!/Users/lnked/web/react-starter.dev/node_modules/source-map-loader/index.js!/Users/lnked/web/react-starter.dev/src/helpers/utils/format-money.ts"],"names":[],"mappings":"sEAAa,OAAA,CAAA,iBAAA,CAAoB,SAAA,GAAA,CAAA,QAAA,CAA2D,CAAA,GAA7C,QAA6C,GAAA,IAAA,EAAA,CAAA,CAA7C,QAA6C,CAA1B,KAAnB,CAC3C,IAAM,CAAA,SAAS,CAAG,GAAI,CAAA,IAAI,CAAR,YAAA,CAAA,OAAA,CAA+B,CAC7C,KAAK,CADwC,UAAA,CAE7C,QAAQ,CAFqC,QAAA,CAG7C,wBAAwB,CAH5B,CAAiD,CAA/B,CAAlB,CAMA,MAAO,CAAA,GAAG,EAAI,SAAS,CAAT,MAAA,CAAd,GAAc,CAAd,CAPS,CAAA,CAUA,OAAA,CAAA,WAAA,CAAc,SAAA,GAAA,CAAA,KAAA,CAAA,QAAA,CAA8E,CAAA,GAAhE,KAAgE,GAAA,IAAA,EAAA,CAAA,CAAhE,KAAgE,CAAhD,CAAhB,CAAgE,IAA7C,QAA6C,GAAA,IAAA,EAAA,CAAA,CAA7C,QAA6C,CAAzB,IAApB,CACxD,IAAI,CAAA,KAAK,CACL,GAAG,EACH,UAAU,CAAC,GAAG,CAAd,QAAW,EAAD,CAAV,CAAA,OAAA,CAAA,KAAA,EAAA,OAAA,CAAA,mBAAA,CAAA,KAAA,EAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA,OAAA,CAAA,QAAA,CAFJ,EAEI,CAFJ,CAQA,GAAI,CAAJ,QAAA,CAAe,CACX,KAAK,CAAG,KAAK,EAAI,KAAK,CAAL,OAAA,CAAA,KAAA,CAAjB,QAAiB,CAAjB,CAGJ,OAAQ,CAAA,GAAG,EAAJ,KAAC,EAAR,CAAA,CAbS,CAAA","sourcesContent":["export const formatMoneyNative = (num: number, currency: string = 'RUB'): number | string => {\n    const formatter = new Intl.NumberFormat('ru-RU', {\n        style: 'currency',\n        currency,\n        maximumSignificantDigits: 2,\n    })\n\n    return num && formatter.format(num)\n}\n\nexport const formatMoney = (num: number, penny: number = 2, breaking: boolean = true): number | string => {\n    let value =\n        num &&\n        parseFloat(num.toString())\n            .toFixed(penny)\n            .replace(/\\d(?=(\\d{3})+\\.)/g, '$& ')\n            .replace(/\\./g, ',')\n            .replace(/,0{2}/g, '')\n\n    if (!breaking) {\n        value = value && value.replace(/\\s/g, '&nbsp;')\n    }\n\n    return (num && value) || 0\n}\n"],"sourceRoot":"/Users/lnked/web/react-starter.dev/"}]}